service: serverless-graphql-boilerplate # service name

plugins:
  - serverless-offline

useDotenv: true

provider:
  name: aws # deploy to AWS
  runtime: nodejs14.x
  versionFunctions: false # disable function versioning

  apiGateway:
    shouldStartNameWithService: true
  environment:
    ITEM_TABLE: ${self:service}-items-${sls:stage} # ${sls:stage} is a shortcut to ${opt:stage, self:provider.stage, "dev"}
  iamRoleStatements:
    - Effect: Allow # allow the Lambda to Get and Put Items of this table
      Action:
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.ITEM_TABLE}" # ${aws:region} is a shortcut to ${opt:region, self:provider.region, "us-east-1"}

resources:
  Resources:
    ItemsTable: # define the table
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
        KeySchema:
          - AttributeName: itemId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ITEM_TABLE}

functions:
  graphql:
    handler: build/graphql.handler # Lambda handler path
    events:
      - http:
          path: graphql # define Lambda endpoint
          method: any # any HTTP method can access this Lambda
          cors: true # enable CORS
